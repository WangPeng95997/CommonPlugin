private static bool ExplodeDestructible(IDestructible dest, Footprint attacker, Vector3 pos, ExplosionGrenade setts)
{
	if (Physics.Linecast(dest.CenterOfMass, pos, MicroHIDItem.WallMask))
	{
		return false;
	}
	Vector3 a = dest.CenterOfMass - pos;
	float magnitude = a.magnitude;
	float num = setts._playerDamageOverDistance.Evaluate(magnitude);
	ReferenceHub referenceHub;
	bool flag = ReferenceHub.TryGetHubNetID(dest.NetworkId, out referenceHub);
	if (flag && referenceHub.characterClassManager.CurRole.team == Team.SCP)
	{
		num *= setts._scpDamageMultiplier;
	}
	Vector3 vector = (1f - magnitude / setts._maxRadius) * (a / magnitude) * setts._rigidbodyBaseForce + Vector3.up * setts._rigidbodyLiftForce;
	if (num > 0f && dest.Damage(num, new ExplosionDamageHandler(attacker, vector, num, 50), dest.CenterOfMass) && flag)
	{
		float num2 = setts._effectDurationOverDistance.Evaluate(magnitude);
		if (num2 > 0f && HitboxIdentity.CheckFriendlyFire(attacker.Hub, referenceHub, false))
		{
			float minimalDuration = setts._minimalDuration;
			ExplosionGrenade.TriggerEffect<Burned>(referenceHub, num2 * setts._burnedDuration, minimalDuration);
			ExplosionGrenade.TriggerEffect<Deafened>(referenceHub, num2 * setts._deafenedDuration, minimalDuration);
			ExplosionGrenade.TriggerEffect<Concussed>(referenceHub, num2 * setts._concussedDuration, minimalDuration);
		}
		if (attacker.Hub != null && attacker.Hub != referenceHub)
		{
			Hitmarker.SendHitmarker(attacker.Hub, 1f);
		}
		referenceHub.inventory.connectionToClient.Send<GunHitMessage>(new GunHitMessage(false, num, pos), 0);
	}
	return true;
}